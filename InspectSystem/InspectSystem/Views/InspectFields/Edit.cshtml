@model InspectSystem.Models.InspectFields

@{
    Layout = null;
    int ACID = Model.ACID;
    int itemID = Model.ItemID;
    int zoneNo = ACID * 100 + itemID;
    string editModalNo = "editModalNo" + zoneNo;
    string fieldDivNo = "fieldDivNo" + zoneNo;
}

<!DOCTYPE html>

<script>
    /* When submit, close the modal. */
    $(document).ready(function () {
        $("#submitBtnEdit").click(function () {
            document.getElementById("@editModalNo").style.display = "none";
        });
    });
</script>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>欄位編輯</title>
</head>
<body>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>


    @using (Ajax.BeginForm("Edit", new AjaxOptions { UpdateTargetId = fieldDivNo }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4></h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ACID)

            @Html.HiddenFor(model => model.ItemID)

            @Html.HiddenFor(model => model.FieldID)

            <div class="form-group">
                @Html.LabelFor(model => model.FieldName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FieldName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FieldName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DataType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DataType, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DataType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UnitOfData, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UnitOfData, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UnitOfData, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MinValue, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MinValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MinValue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MaxValue, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MaxValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MaxValue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" id="submitBtnEdit"/>
                </div>
            </div>
        </div>
        <hr />
    }
</body>
</html>
