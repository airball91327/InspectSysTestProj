@model InspectSystem.Models.InspectDocDetailsViewModels

<script src="~/Scripts/ClassContentOfArea.js"></script>

@{
    ViewBag.Title = "ClassContentOfArea";
}


<h3>@ViewBag.ClassName</h3>
<hr />
@using (Html.BeginForm("TempSave", "InspectDocDetails", FormMethod.Post, new { id = "detailsForm" }))
{
    @Html.AntiForgeryToken()

    var currentItemName = "0";
    int i = 0;
    <div class="container col-md-12">
        @foreach (var item in Model.InspectItems)
        {
            /* Display the ItemName when ItemName is not the same. */
            if (item.ItemName != currentItemName)
            {
                <div class="row">
                    <span class="col-md-2" style="font-weight: bold">
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </span>
                    @foreach (var fieldItem in Model.InspectFields)
                    {
                        /* Display all the FieldName belong the current Item. */
                        if (item.ItemID == fieldItem.ItemID)
                        {
                            if(fieldItem.FieldName != null)
                            {
                                <span class="col-md-1">
                                    @Html.DisplayFor(modelItem => fieldItem.FieldName)
                                </span>
                            }

                            foreach (var docItem in Model.InspectDocDetailsTemporary)
                            {
                                /* Display textbox or checkbox for all fields. */
                                if (docItem.ItemID == item.ItemID && docItem.FieldID == fieldItem.FieldID)
                                {
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].DocID", docItem.DocID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].AreaID", docItem.AreaID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].AreaName", docItem.AreaName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ClassID", docItem.ClassID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ClassName", docItem.ClassName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ItemID", docItem.ItemID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ItemName", docItem.ItemName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].FieldID", docItem.FieldID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].FieldName", docItem.FieldName)

                                    switch (fieldItem.DataType)
                                    {
                                        case "string":
                                            <span class="col-md-2">
                                                @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].Value", @style = "width: 45%" } })
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].Value", "", new { @class = "text-danger" })
                                            </span>
                                            break;

                                        case "float":
                                            <span class="col-md-2">
                                                @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].Value", @style = "width: 45%"} })
                                                @Html.DisplayFor(modelItem => fieldItem.UnitOfData)
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].Value", "", new { @class = "text-danger" })
                                            </span>
                                            break;

                                        case "boolean":
                                            <span class="col-md-2">
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, true, new { @Name = "InspectDocDetailsTemporary[" + i + "].IsFunctional" })正常
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, false, new { @Name = "InspectDocDetailsTemporary[" + i + "].IsFunctional" })不正常
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].IsFunctional", "", new { @class = "text-danger" })
                                            </span>
                                            <span class="col-md-4">
                                                @Html.LabelFor(modelItem => docItem.ErrorDescription)
                                                @Html.EditorFor(modelItem => docItem.ErrorDescription, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].ErrorDescription", @style = "width: 70%" } })
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].ErrorDescription", "", new { @class = "text-danger" })
                                            </span>
                                            break;
                                    }
                                }
                            }
                            i++;
                        }
                    }
                </div>
                <hr />
            }
            else
            {
                currentItemName = item.ItemName;
            }
        }
    <div>
        <input class="btn btn-primary" type="submit" value="暫時儲存" />
        <button type="button" class="btn btn-primary" id="saveToDBbtn">送出紀錄</button>
    </div>
    <hr />
    </div>
}
