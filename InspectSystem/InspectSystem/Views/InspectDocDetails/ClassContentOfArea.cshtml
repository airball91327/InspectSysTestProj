@model InspectSystem.Models.InspectDocDetailsViewModels

<script src="~/Scripts/ClassContentOfArea.js"></script>

@{
    ViewBag.Title = "ClassContentOfArea";
}

<style>
    input[type=checkbox] {
        -ms-transform: scale(2); /* IE */
        -moz-transform: scale(2); /* FireFox */
        -webkit-transform: scale(2); /* Safari and Chrome */
        -o-transform: scale(2); /* Opera */
    }
    h3, .itemName {
        font-weight: bold;
    }
    input[type=text] {
        width: 65%;
    }
    #sendToChecker {
        position: absolute;
        right: 12px;
    }
    .radioBtn {
        padding-bottom: 15px;
    }
</style>


<h3 style="padding-left: 10px">@ViewBag.ClassName</h3>
<hr />
@using (Html.BeginForm("TempSave", "InspectDocDetails", FormMethod.Post, new { id = "detailsForm" }))
{
    @Html.AntiForgeryToken()

    var currentItemName = "0";
    int i = 0, j = 0;
    <div class="container col-md-12">
        @foreach (var item in Model.InspectItems)
        {
            /* Display the ItemName when ItemName is not the same. */
            if (item.ItemName != currentItemName)
            {
                <div class="row">
                    <div class="col-md-2 itemName">
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </div>
                    <div class="col-md-6">
                    @foreach (var fieldItem in Model.InspectFields)
                    {
                        /* Display all the FieldName belong the current Item. */
                        if (item.ItemID == fieldItem.ItemID)
                        {
                            if(fieldItem.FieldName != null)
                            {
                                var lengthOfFieldName = fieldItem.FieldName.Length;
                                int cols = (lengthOfFieldName / 2);
                                if (cols < 1)
                                {
                                    cols = cols + 1;
                                }
                                string setCols = "col-md-" + cols.ToString();

                                <div class="@setCols">
                                    @Html.DisplayFor(modelItem => fieldItem.FieldName)
                                </div>
                            }

                            foreach (var docItem in Model.InspectDocDetailsTemporary)
                            {
                                /* Display textbox or checkbox for all fields, except boolean type. */
                                if (docItem.ItemID == item.ItemID && docItem.FieldID == fieldItem.FieldID &&
                                    fieldItem.DataType != "boolean")
                                {
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].DocID", docItem.DocID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].AreaID", docItem.AreaID, new { id = "InspectDocDetailsTemporary[" + i + "].AreaID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].AreaName", docItem.AreaName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ClassID", docItem.ClassID, new { id = "InspectDocDetailsTemporary[" + i + "].ClassID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ClassName", docItem.ClassName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ItemID", docItem.ItemID, new { id = "InspectDocDetailsTemporary[" + i + "].ItemID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ItemName", docItem.ItemName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].FieldID", docItem.FieldID, new { id = "InspectDocDetailsTemporary[" + i + "].FieldID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].FieldName", docItem.FieldName)

                                    switch (fieldItem.DataType)
                                    {
                                        case "string":
                                            <div class="col-md-5">
                                                @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].Value" } })
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].Value", "", new { @class = "text-danger" })
                                            </div>
                                            break;

                                        case "float":
                                            <div class="col-md-5">
                                                @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].Value", @class = "inputValue", id = i} })
                                                @Html.DisplayFor(modelItem => fieldItem.UnitOfData)
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].Value", "", new { @class = "text-danger" })
                                                <br/><span class="@i"></span>
                                            </div>
                                            break;

                                        case "checkbox":
                                            <div class="col-md-1">
                                                @if(docItem.Value == "true")
                                                {
                                                    @Html.CheckBox("InspectDocDetailsTemporary[" + i + "].Value", true)
                                                }
                                                else
                                                {
                                                    @Html.CheckBox("InspectDocDetailsTemporary[" + i + "].Value", false)
                                                }
                                            </div>
                                            break;
                                    }
                                    i++;
                                }
                                else if (docItem.ItemID == item.ItemID && docItem.FieldID == fieldItem.FieldID &&
                                         fieldItem.DataType == "boolean")
                                {
                                    i++; // Skip an array space to let the boolean type insert later.
                                }
                            }
                        }
                    }
                    </div>
                    <div class="col-md-4">
                        @foreach (var fieldItem in Model.InspectFields)
                         {
                             /* Display all the FieldName belong the current Item. */
                             if (item.ItemID == fieldItem.ItemID)
                             {

                                foreach (var docItem in Model.InspectDocDetailsTemporary)
                                {
                                     /* Display textbox or checkbox for all fields. */
                                     if (docItem.ItemID == item.ItemID && docItem.FieldID == fieldItem.FieldID)
                                     {
                                         if(fieldItem.DataType == "boolean")
                                         {
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].DocID", docItem.DocID)
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].AreaID", docItem.AreaID, new { id = "InspectDocDetailsTemporary[" + j + "].AreaID" })
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].AreaName", docItem.AreaName)
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].ClassID", docItem.ClassID, new { id = "InspectDocDetailsTemporary[" + j + "].ClassID" })
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].ClassName", docItem.ClassName)
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].ItemID", docItem.ItemID, new { id = "InspectDocDetailsTemporary[" + j + "].ItemID" })
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].ItemName", docItem.ItemName)
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].FieldID", docItem.FieldID, new { id = "InspectDocDetailsTemporary[" + j + "].FieldID" })
                                             @Html.Hidden("InspectDocDetailsTemporary[" + j + "].FieldName", docItem.FieldName)
                                             <div class="col radioBtn">
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, true, new { @Name = "InspectDocDetailsTemporary[" + j + "].IsFunctional" })正常
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, false, new { @Name = "InspectDocDetailsTemporary[" + j + "].IsFunctional" })不正常
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + j + "].IsFunctional", "", new { @class = "text-danger" })
                                             </div>
                                             <div class="w-100"></div>
                                             <div class="col">
                                                @Html.LabelFor(modelItem => docItem.ErrorDescription)
                                                 <br />
                                                @Html.TextAreaFor(modelItem => docItem.ErrorDescription, new { @Name = "InspectDocDetailsTemporary[" + j + "].ErrorDescription", rows = "3" })
                                             </div>
                                         }
                                         j++;
                                     }
                                }
                             }
                         }
                    </div>
                </div>
                <hr />
            }
            else
            {
                currentItemName = item.ItemName;
            }
        }
    <div>
        <input class="btn btn-primary" type="submit" value="暫時儲存" />
        <button type="button" class="btn btn-success" id="sendToChecker">送出審核</button>
    </div>
    <hr />
    </div>
}
